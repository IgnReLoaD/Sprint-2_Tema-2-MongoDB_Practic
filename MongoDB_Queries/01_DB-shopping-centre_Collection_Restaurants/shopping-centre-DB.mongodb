
// A.- Select the DATABASE to use:
use('shoppingCentreDB');

// B.- Import-&-create COLLECTION (table-data) from JSON file:
//     B.1. desde Interface COMPASS -> Add Data -> Import file -> escoger el .json
//     B.2. o bien desde Terminal CMD (ojo no mongosh) ejecutar el mongoimport .....
//          Yo lo hice así:  mongoimport -d shoppingCentreDB -c restaurants --type json --file restaurants.json
//          alguien hace así:  mongoimport --db shoppingCentreDB --collection restaurants --type json --file restaurants.json --jsonArray;

// C.- QUERIES:

// 1. Escriu una consulta per mostrar tots els documents en la col·lecció Restaurants.
db.restaurants.find({});

// 2. Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine de tots els documents en la col·lecció Restaurants.
db.restaurants.find().forEach(function(docum){print(`ID: ${docum.restaurant_id} | NAME: ${docum.name} | BOROUGH: ${docum.borough} | CUISINE: ${docum.cuisine}` )})

// 3. Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine, però excloent el camp _id per tots els documents en la col·lecció Restaurants.
db.restaurants.find({},{restaurant_id: 1,name: 1,borough: 1,cuisine: 1,_id:0})

// 4. Escriu una consulta per mostrar restaurant_id, name, borough i zip code, però excloent el camp _id per tots els documents en la col·lecció Restaurants.
db.restaurants.find({},{restaurant_id: 1,name: 1,borough: 1, 'address.zipcode': 1,_id:0})

// 5. Escriu una consulta per mostrar tots els restaurants que estan en el Bronx.
db.restaurants.find({borough:"Bronx"},{name:1,_id:0})

// 6. Escriu una consulta per mostrar els primers 5 restaurants que estan en el Bronx.
db.restaurants.find({borough:"Bronx"},{name:1,_id:0}).limit(5)

// 7. Escriu una consulta per mostrar els 5 restaurants després de saltar els primers 5 que siguin del Bronx.
db.restaurants.find({borough:"Bronx"},{name:1,_id:0}).limit(5).skip(5)

// 8. Escriu una consulta per trobar els restaurants que tenen algun score més gran de 90.
db.restaurants.find({'grades.score':{$gt:90}},{name:1,_id:0});

// 9. Escriu una consulta per trobar els restaurants que tenen un score més gran que 80 però menys que 100.
db.restaurants.find({grades:{$elemMatch:{'score':{$gt:80,$lt:100}}}});

// 10. Escriu una consulta per trobar els restaurants que estan situats en una longitud inferior a -95.754168.
db.restaurants.find({'address.coord.0':{$lt: -95.754168}},{name:1,_id:0});

// 11. Escriu una consulta de MongoDB per a trobar els restaurants que no cuinen menjar 'American ' i tenen algun score superior a 70 i latitud inferior a -65.754168.
db.restaurants.find({$and:[{cuisine:{$ne:'American'},'grades.score':{$gt:70},'address.coord.0':{$lt:-65.754168}}]},{name:1,_id:0});



// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
// db.restaurants.drop();

// mongoimport --db shoppingCentreDB --collection restaurants --type json --file restaurants.json --jsonArray;
// mongoimport(restaurants.json -d shoppingCentreDB -c restaurants --drop);

// Insert a few documents into the sales collection.
// db.restaurants.insertMany([  
//   { '_id': 1, 'item': 'abc', 'price': 10, 'quantity': 2, 'date': new Date('2014-03-01T08:00:00Z') },
//   { '_id': 2, 'item': 'jkl', 'price': 20, 'quantity': 1, 'date': new Date('2014-03-01T09:00:00Z') },
//   { '_id': 3, 'item': 'xyz', 'price': 5, 'quantity': 10, 'date': new Date('2014-03-15T09:00:00Z') },
//   { '_id': 4, 'item': 'xyz', 'price': 5, 'quantity':  20, 'date': new Date('2014-04-04T11:21:39.736Z') },
//   { '_id': 5, 'item': 'abc', 'price': 10, 'quantity': 10, 'date': new Date('2014-04-04T21:23:13.331Z') },
//   { '_id': 6, 'item': 'def', 'price': 7.5, 'quantity': 5, 'date': new Date('2015-06-04T05:08:13Z') },
//   { '_id': 7, 'item': 'def', 'price': 7.5, 'quantity': 10, 'date': new Date('2015-09-10T08:43:00Z') },
//   { '_id': 8, 'item': 'abc', 'price': 10, 'quantity': 5, 'date': new Date('2016-02-06T20:20:13Z') },
// ]);

// db.restaurants.insertMany([jsonRESTAURANTS]);


// Run a find command to view ALL items inserted
// db.restaurants.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// db.restaurants.find().pretty();


// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.

// db.sales.aggregate(aggregation);


// var file = cat('./restaurants.json');     # file name
// use shoppingCentreDB;                        # db name
// var o = JSON.parse(file);         # convert string to JSON
// db.restaurants.insert(o);                # collection name

// var file = cat('I:/data/db/card_type_authorization.json'); 
// var o = JSON.parse(file); 
// db.CARD_TYPE_AUTHORIZATION.insert(o);

// x = tostring('./restaurants.json');
// console.log(x);
